(in-package #:sndfile)

(defclass cache-test (test-case)
  ())

(def-test-method test-cache ((test cache-test))
  (with-cache (cache :total-items 10 :item-type :int)
    (dotimes (i 10)
      (setf (iterator-value cache) i)
      (unless (>= i 9) (offset-iterator cache 1)))
    (assert-true (iterator-at-end-p cache) "iterator not at end-address")
    (loop for i from 9 downto 0 do
         (progn (assert-equal i (iterator-value cache))
                (unless (<= i 0) (offset-iterator cache -1))))
    (assert-true (iterator-at-start-p cache) "iterator not at start-address")
    (move-iterator cache 3)
    (assert-equal 3 (iterator-value cache))
    (move-iterator cache 0)
    (dotimes (i 10)
      (assert-equal i (read-entry cache)))
    (assert-condition 'cache-index-error
                      (assert-within-bounds 
                         cache (1+ (pointer-address (end-address cache)))))
    (move-iterator cache 9)
    (read-entry cache)
    (assert-condition 'cache-index-error (read-entry cache))
    (offset-iterator cache 2)
    (assert-equal 2 (iterator-value cache))
    (move-iterator cache 0)
    (write-entry cache 7)
    (assert-equal 1 (iterator-value cache))
    (move-iterator cache 0)
    (assert-equal 7 (iterator-value cache))))

(def-test-method test-free ((test cache-test))
  (let ((cache (make-instance 'cache :item-type :int :total-items 10)))
    (assert-false (null-pointer-p (start-address cache)) "start-addres is null")
    (free cache)
    (assert-true (null-pointer-p (start-address cache))
                 "memory not de-allocated")
    (assert-true (out-of-cache-p cache) "not at end of cache")
    (assert-true (iterator-at-start-p cache) "iterator not at start")
    (assert-true (iterator-at-end-p cache) "iterator not at end")))