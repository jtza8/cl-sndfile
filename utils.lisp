(in-package #:sndfile)
(defparameter *major-format-flags*
  `((:wav .   ,SF_FORMAT_WAV)
    (:aiff .  ,SF_FORMAT_AIFF)
    (:au .    ,SF_FORMAT_AU)
    (:raw .   ,SF_FORMAT_RAW)
    (:paf .   ,SF_FORMAT_PAF)
    (:svx .   ,SF_FORMAT_SVX)
    (:nist .  ,SF_FORMAT_NIST)
    (:voc .   ,SF_FORMAT_VOC)
    (:ircam . ,SF_FORMAT_IRCAM)
    (:w64 .   ,SF_FORMAT_W64)
    (:mat4 .  ,SF_FORMAT_MAT4)
    (:mat5 .  ,SF_FORMAT_MAT5)
    (:pvf .   ,SF_FORMAT_PVF)
    (:xi .    ,SF_FORMAT_XI)
    (:htk .   ,SF_FORMAT_HTK)
    (:sds .   ,SF_FORMAT_SDS)
    (:avr .   ,SF_FORMAT_AVR)
    (:wavex . ,SF_FORMAT_WAVEX)
    (:sd2 .   ,SF_FORMAT_SD2)
    (:flac .  ,SF_FORMAT_FLAC)
    (:caf .   ,SF_FORMAT_CAF)
    (:wve .   ,SF_FORMAT_WVE)
    (:ogg .   ,SF_FORMAT_OGG)
    (:mpc2k . ,SF_FORMAT_MPC2K)
    (:rf64 .  ,SF_FORMAT_RF64)))

(defparameter *minor-format-flags*
  `((:pcm-s8 .    ,SF_FORMAT_PCM_S8)
    (:pcm-16 .    ,SF_FORMAT_PCM_16)
    (:pcm-24 .    ,SF_FORMAT_PCM_24)
    (:pcm-32 .    ,SF_FORMAT_PCM_32)
    (:pcm-u8 .    ,SF_FORMAT_PCM_U8)
    (:float .     ,SF_FORMAT_FLOAT)
    (:double .    ,SF_FORMAT_DOUBLE)
    (:ulaw .      ,SF_FORMAT_ULAW)
    (:alaw .      ,SF_FORMAT_ALAW)
    (:ima-adpcm . ,SF_FORMAT_IMA_ADPCM)
    (:ms-adpcm .  ,SF_FORMAT_MS_ADPCM)
    (:gsm610 .    ,SF_FORMAT_GSM610)
    (:vox-adpcm . ,SF_FORMAT_VOX_ADPCM)
    (:g721-32 .   ,SF_FORMAT_G721_32)
    (:g723-24 .   ,SF_FORMAT_G723_24)
    (:g723-40 .   ,SF_FORMAT_G723_40)
    (:dwvw-12 .   ,SF_FORMAT_DWVW_12)
    (:dwvw-16 .   ,SF_FORMAT_DWVW_16)
    (:dwvw-24 .   ,SF_FORMAT_DWVW_24)
    (:dwvw-n .    ,SF_FORMAT_DWVW_N)
    (:dpcm-8 .    ,SF_FORMAT_DPCM_8)
    (:dpcm-16 .   ,SF_FORMAT_DPCM_16)
    (:vorbis .    ,SF_FORMAT_VORBIS)))

(defun format-to-labels (format)
  (let ((major (dpb (ldb (byte 8 16) format) (byte 8 16) 0))
        (minor (ldb (byte 8 0) format)))
    (flet ((format-to-label (format flags)
             (or (car (rassoc format flags)) :undefined)))
      (cons (format-to-label major *major-format-flags*)
            (format-to-label minor *minor-format-flags*)))))

(defun labels-to-format (labels)
  (flet ((label-to-format (label flags)
           (or (cdr (assoc label flags))
               (error "invalid labels"))))
    (logior (label-to-format (car labels) *major-format-flags*)
            (label-to-format (cdr labels) *minor-format-flags*))))